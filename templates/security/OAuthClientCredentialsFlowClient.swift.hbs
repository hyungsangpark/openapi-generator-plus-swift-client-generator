//  
//  {{>frag/generatedBy}}
//

import Foundation

/// A client for the OAuth 2.0 Client Credentials Flow
public class OAuthClientCredentialsFlowClient: AbstractOAuthFlowClient {
    
    private let authticationManager: AuthenticationManager
    
    public init(clientId: String,
                clientSecret: String,
                refreshURL: URL? = nil,
                preemptiveAccessTokenRefresh autoRefreshInterval: TimeInterval? = nil,
                tokenURL: URL,
                accessTokenDidChange: AccessTokenHandler? = nil) {
        self.authticationManager = AuthenticationManager(tokenURL: tokenURL)
        super.init(clientId: clientId, clientSecret: clientSecret, refreshURL: refreshURL, preemptiveAccessTokenRefresh: autoRefreshInterval, accessTokenDidChange: accessTokenDidChange)
    }
    
    /// Authenticate the security client, requesting the given scopes.
    public func authenticate(scopes: [String]?, additionalParams params: [String: String]? = nil) async throws {
        try await authticationManager.authenticate(scopes: scopes, additionalParams: params, clientId: clientId, clientSecret: clientSecret, tokenManager: tokenManager)
    }
    
    public override func reauthenticate(failedRequest: URLRequest, securityScheme: SecurityScheme, scopes: [String]?) async throws {
        do {
            try await super.reauthenticate(failedRequest: failedRequest, securityScheme: securityScheme, scopes: scopes)
        } catch {
            try await authenticate(scopes: scopes)
        }
    }
    
    private actor AuthenticationManager {
        private let tokenURL: URL
        
        private var authenticateTask: Task<(), Error>?
        
        init(tokenURL: URL) {
            self.tokenURL = tokenURL
        }
        
        func authenticate(scopes: [String]?, additionalParams params: [String: String]? = nil, clientId: String, clientSecret: String, tokenManager: OAuthAccessTokenManager) async throws {
            
            if let task = authenticateTask {
                return try await task.value
            }
            
            let task = Task {
                var form: [String: String] = [
                    "grant_type": "client_credentials",
                    "client_id": clientId,
                    "client_secret": clientSecret
                ]
                if let scopes = scopes {
                    form["scope"] = scopes.joined(separator: " ")
                }
                if let params = params {
                    form.merge(params, uniquingKeysWith: { (_, new) in new })
                }
                let request = createOAuthRequest(url: tokenURL, params: form)
                
                let requestDate = Date()
                let result = try await URLSession.handleApiRequest(request)
                switch result.response.statusCode {
                case 200:
                    var resultData = try JSONDecoder().decode(OAuthAccessToken.self, from: result.data)
                    resultData.createdAt = requestDate
                    try await tokenManager.setAccessToken(resultData)
                default:
                    throw APIError.authenticationFailed(result.response, data: result.data)
                }
            }
            
            authenticateTask = task
            defer {
                authenticateTask = nil
            }
            
            try await task.value
        }
    }
}
