/** The security schemes declared by the API specification. */
import Foundation

public enum SecurityScheme: String {
{{#each securitySchemes}}
    case {{identifier name}} = {{{stringLiteral name}}}
{{/each}}
}

extension SecurityClient {

    {{#each securitySchemes}}
    {{#if isBasic}}
    public static func {{{identifier name}}}(username: String, password: String) -> SecurityClient {
        return BasicAuthenticationSecurityClient(username: username, password: password)
    }
    {{/if}}
    {{#if isApiKey}}
    public static func {{{identifier name}}}(apiKey: String) -> SecurityClient {
        return APIKeySecurityClient(apiKey: apiKey, mode: .{{in}}, paramName: {{{stringLiteral paramName}}})
    }
    {{/if}}
    {{#if isOAuth}}
    {{#each flows}}
    {{!-- authorizationCode, implicit, password or clientCredentials --}}
    {{#ifeq type 'password'}}
    public static func {{{identifier ../name}}}PasswordFlow(clientId: String, clientSecret: String, automaticallyRefreshTokensThisManySecondsEarly: TimeInterval? = nil) -> SecurityClient {
        return OAuthPasswordFlowClient(clientId: clientId, clientSecret: clientSecret{{#if refreshUrl}}, refreshURL: URL(string: "{{{refreshUrl}}}"){{/if}}, automaticallyRefreshTokensThisManySecondsEarly: automaticallyRefreshTokensThisManySecondsEarly{{#if tokenUrl}}, tokenURL: URL(string: "{{{tokenUrl}}}"){{/if}})
    }
    {{/ifeq}}
    {{#ifeq type 'clientCredentials'}}
    public static func {{{identifier ../name}}}ClientCredentialsFlow(clientId: String, clientSecret: String, automaticallyRefreshTokensThisManySecondsEarly: TimeInterval? = nil) -> SecurityClient {
        return OAuthClientCredentialsFlowClient(clientId: clientId, clientSecret: clientSecret{{#if refreshUrl}}, refreshURL: URL(string: "{{{refreshUrl}}}"){{/if}}, automaticallyRefreshTokensThisManySecondsEarly: automaticallyRefreshTokensThisManySecondsEarly{{#if tokenUrl}}, tokenURL: URL(string: "{{{tokenUrl}}}"){{/if}})
    }
    {{/ifeq}}
    {{#ifeq type 'authorizationCode'}}
    public static func {{{identifier ../name}}}AuthorizationCodeFlow(clientId: String, clientSecret: String, automaticallyRefreshTokensThisManySecondsEarly: TimeInterval? = nil) -> SecurityClient {
        return OAuthAuthorizationCodeFlowClient(clientId: clientId, clientSecret: clientSecret{{#if refreshUrl}}, refreshURL: URL(string: "{{{refreshUrl}}}"){{/if}}, automaticallyRefreshTokensThisManySecondsEarly: automaticallyRefreshTokensThisManySecondsEarly{{#if tokenUrl}}, tokenURL: URL(string: "{{{tokenUrl}}}"){{/if}}{{#if authorizationUrl}}, authorizationURL: URL(string: "{{{authorizationUrl}}}"){{/if}})
    }
    {{/ifeq}}
    {{#ifeq type 'implicit'}}
    // TODO: Generate the implicit flow client
    {{/ifeq}}
    {{/each}}
    {{/if}}
    {{/each}}
}
