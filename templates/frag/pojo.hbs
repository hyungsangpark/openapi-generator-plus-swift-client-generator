{{>frag/schemaDocumentation}}
{{#join '_parents' ', '}}
Swift.Codable
Swift.Hashable
{{#each implements}}
{{{nativeType.parentType}}}
{{/each}}
{{/join}}
public struct {{{name}}}: {{{_parents}}} {
{{#each properties}}
	{{>frag/propertyDocumentation}}
	public var {{{name}}}: {{{nativeType}}}
{{/each}}

{{#join '_params' ', '}}
{{#each properties}}
{{{name}}}: {{{nativeType}}}{{#unless required}} = {{#if initialValue}}{{{initialValue.literalValue}}}{{else}}{{{undefinedValueLiteral schema}}}{{/if}}{{/unless}}
{{/each}}
{{/join}}
	public init({{{_params}}}) {
{{#each properties}}
		self.{{{name}}} = {{{name}}}
{{/each}}
	}

{{#if properties}}
	enum CodingKeys: String, Swift.CodingKey, Swift.CaseIterable {
{{#each properties}}
		case {{{name}}}{{#ifeq name serializedName}}{{else}} = {{{stringLiteral serializedName}}}{{/ifeq}}
{{/each}}
	}

	// Encodable protocol methods

	public init(from decoder: Swift.Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
{{#each properties}}
		{{>frag/decode keyed=true}}
{{/each}}
	}

	public func encode(to encoder: Swift.Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)
{{#each properties}}
		{{>frag/encode keyed=true}}
{{/each}}
	}

{{/if}}
	{{>frag/nestedSchemas}}
}
