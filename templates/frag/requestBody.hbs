{{#with defaultContent}}
localVarHeaderParameter.set("Content-Type", {{{stringLiteral mediaType.mediaType}}})

{{#ifeq mediaType.mimeType 'application/x-www-form-urlencoded'}}
var localVarFormParams = [NameValuePair]()
{{#each (allProperties schema)}}
{{>frag/requestParameter dest='localVarFormParams' var=(concat ../../name '.' name) encoding=(lookup ../encoding.properties name)}}
{{/each}}
localVarRequest.httpBody = localVarFormParams.toString(separator: "&").data(using: .utf8)!
{{else ifeq mediaType.mimeType 'application/json'}}
localVarRequest.httpBody = try JSONEncoder().encode({{identifier ../name}})
{{else ifeq mediaType.mimeType 'text/json'}}
localVarRequest.httpBody = try JSONEncoder().encode({{identifier ../name}})
{{else ifmatch mediaType.mimeType 'multipart/.*'}}
var localVarFormData = FormData()
{{#each encoding.properties}}
{{#if (isArray property)}}
{{#if (or (not property.required) property.nullable)}}
if let {{property.name}} = {{../../name}}.{{property.name}}{{#if property.nullable}}{{#unless property.required}}?{{/unless}}.value{{/if}} {
	{{property.name}}.forEach {
		{{>frag/multipartProperty . propertyVar='$0' bodyPartsVar='localVarFormData' schemaUsage=property.schema.component}}
	}
}
{{else}}
{{{../../name}}}.{{property.name}}.forEach {
	{{>frag/multipartProperty . propertyVar='$0' bodyPartsVar='localVarFormData' schemaUsage=property.schema.component}}
}
{{/if}}
{{else}}
{{>frag/multipartProperty . propertyVar=(concat ../../name '.' property.name) bodyPartsVar='localVarFormData' schemaUsage=property}}
{{/if}}
{{/each}}
localVarRequest.httpBody = localVarFormData.data
localVarHeaderParameter.set("Content-Type", localVarFormData.contentType)
{{else if (isString)}}
localVarRequest.httpBody = {{{../name}}}.data(using: .utf8)!
{{else}}
localVarRequest.httpBody = {{{../name}}}
{{/ifeq}}
{{/with}}
