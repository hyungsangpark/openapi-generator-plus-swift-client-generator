public enum {{{name}}} : Codable, Hashable, CaseIterable, Equatable {
    case unknown(value: String)
{{#each enumValues}}
    case {{{name}}} = {{{literalValue}}}
{{/each}}

    init(rawValue: String) {
        switch rawValue {
{{#each enumValues}}
        case {{{literalValue}}}: self = .{{{name}}}
{{/each}}
        default: self = .unknown(value: rawValue)
        }
    }

    var value: String {
        switch self {
        case let .unknown(value): return value
{{#each enumValues}}
        case .{{{name}}}: return {{{literalValue}}}
{{/each}}
        }
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawString = try container.decode(String.self)
        self = .init(rawValue: rawString)
    }

    public func encode(to encoder: Encoder) throws {
        var container = try encoder.singleValueContainer()
        try container.encode(value)
    }

{{#join '_cases' ', '}}
{{#each enumValues}}.{{{name}}}{{/each}}
{{/join}}
    public static var allCases: [{{{name}}}] {
        return [{{{_cases}}}]
    }
}
