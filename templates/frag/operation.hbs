{{#join '_params' ', '}}
{{#each parameters}}
{{{name}}}: {{{nativeType}}}{{#unless required}} = {{#if defaultValue}}{{{defaultValue}}}{{else}}nil{{/if}}{{/unless}}
{{/each}}
{{#with requestBody}}
{{{name}}}: {{{nativeType}}}{{#unless required}} = {{#if defaultValue}}{{{defaultValue}}}{{else}}nil{{/if}}{{/unless}}
{{/with}}
{{/join}}
{{#join '_callParams' ', '}}
{{#each parameters}}
{{{name}}}: {{{name}}}
{{/each}}
{{#with requestBody}}
{{{name}}}: {{{name}}}
{{/with}}
{{/join}}
public enum {{className name}}Result {
{{#each responses}}
	{{#if description}}
	/**
	 * {{#indent '	 * '}}{{{md description}}}{{/indent}}
	 */
	{{/if}}
	case _{{{code}}}{{#if defaultContent.nativeType}}(_ value: {{{defaultContent.nativeType}}}){{/if}}
{{/each}}
	/** An unexpected response */
	case unexpected(response: HTTPURLResponse, data: Data?)
	/** An error occurred in processing */
	case error(_ error: Error)
}

{{>frag/operationDocumentation}}
open func {{{name}}}({{{_params}}}{{#if _params}}, {{/if}}responseQueue: DispatchQueue?, completion: @escaping ((_ result: {{className name}}Result) -> Void)) {
	do {
		let __request = try {{{name}}}Request({{{_callParams}}})
		URLSession.handleApiRequest(__request) { response, data, error in
			if let error = error {
				completion(.error(error))
				return
			}

			switch response!.statusCode {
{{#each responses}}
				case {{{code}}}:
					{{#if defaultContent.nativeType}}
					if let data = data {
						do {
							completion(._{{{code}}}(try JSONDecoder().decode({{{defaultContent.nativeType.concreteType}}}.self, from: data)))
						} catch let decodingError {
							completion(.error(decodingError))
						}
					} else {
						completion(.unexpected(response: response!, data: data))
					}
					{{else}}
					completion(._{{{code}}})
					{{/if}}
{{/each}}
				default:
					completion(.unexpected(response: response!, data: data))
			}
		}
	} catch let error {
		completion(.error(error))
	}
}

{{>frag/operationDocumentation}}
open func {{{name}}}Request({{{_params}}}) throws -> URLRequest {
	let localVarPath = "{{{../path}}}{{{path}}}"
	{{#each pathParams}}
		.replacingOccurrences(of: "{{safe '{'}}{{{serializedName}}}{{safe '}'}}", with: String({{identifier name}}).addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!)
	{{/each}}

	var localVarHeaderParameter = [NameValuePair]()
	{{!-- Avoid Swift complaining that localVarHeaderParameter should be a let --}}
	localVarHeaderParameter.removeAll()

	{{>frag/requestSecurity}}

	var localVarUrlComponents = URLComponents(string: "\(self.basePath)\(localVarPath)")!

{{#if queryParams}}
	var localVarQueryParameter = [NameValuePair]()
	if let localVarExistingQueryItems = localVarUrlComponents.queryItems {
		localVarQueryParameter.append(queryItems: localVarExistingQueryItems)
	}
{{#each queryParams}}
	{{>frag/requestParameterWrapper dest='localVarQueryParameter' var=(identifier name) encoding=encoding}}
{{/each}}
	localVarUrlComponents.queryItems = localVarQueryParameter.toURLQueryItems()

{{else}}
	{{!-- Avoid Swift complaining that localVarUrlComponents should be a let --}}
	localVarUrlComponents.queryItems = localVarUrlComponents.queryItems

{{/if}}
	var localVarRequest = URLRequest(url: localVarUrlComponents.url!, cachePolicy: self.cachePolicy, timeoutInterval: self.timeoutInterval)
	localVarRequest.httpMethod = {{{stringLiteral httpMethod}}}

{{#each headerParams}}
	{{>frag/requestParameterWrapper dest='localVarHeaderParameter' var=(identifier name) encoding=encoding}}

{{/each}}
{{#if cookieParams}}
	var localVarCookieParams = [NameValuePair]()
{{#each cookieParams}}
	{{>frag/requestParameter dest='localVarCookieParams' var=(identifier name) encoding=encoding}}

{{/each}}
	localVarHeaderParameter.set("Cookie", localVarCookieParams.toString(separator: "; "))

{{/if}}
{{#with requestBody}}
	{{#if required}}
	{{>frag/requestBody}}
	{{else}}
	if let {{{name}}} = {{{name}}} {
		{{>frag/requestBody}}
	}
	{{/if}}
	
{{/with}}
	localVarHeaderParameter.forEach { item in localVarRequest.addValue(item.value!, forHTTPHeaderField: item.name) }

	if let localVarPrepareRequestBlock = self.configuration.prepareRequestBlock {
		localVarPrepareRequestBlock(&localVarRequest)
	}
	return localVarRequest
}

