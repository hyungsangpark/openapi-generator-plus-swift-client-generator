{{#join '_params' ', '}}
{{#each parameters}}
{{{name}}}: {{{nativeType}}}{{#unless required}} = nil{{/unless}}
{{/each}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
{{{name}}}: {{{nativeType}}}{{#unless required}} = nil{{/unless}}
{{/with}}
{{/if}}
{{/join}}
{{#join '_callParams' ', '}}
{{#each parameters}}
{{{name}}}: {{{name}}}
{{/each}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
{{{name}}}: {{{name}}}
{{/with}}
{{/if}}
{{/join}}
public enum {{className name}}Result {
{{#each responses}}
    {{#if description}}
    /**
     * {{#indent '     * '}}{{{md description}}}{{/indent}}
     */
    {{/if}}
    case _{{{code}}}{{#if defaultContent.nativeType}}(_ value: {{{defaultContent.nativeType}}}){{/if}}
{{/each}}
    /** An unexpected response */
    case unexpected(response: HTTPURLResponse, data: Data?)
    /** An error occurred in processing */
    case error(_ error: Error)
}

{{#if (gt (count parameters) 1)}}
{{>frag/parametersStruct}}

{{>frag/operationDocumentation}}
{{#if deprecated}}
@available(*, deprecated)
{{/if}}
open func {{{name}}}(_ __request: {{{className (concat name '_' 'request')}}}, {{#if requestBody.nativeType}}{{{requestBody.name}}}: {{{requestBody.nativeType}}}{{#unless requestBody.required}} = nil{{/unless}}, {{/if}}responseQueue: DispatchQueue? = nil, completion: @escaping ((_ result: {{className name}}Result) -> Void)) {
    {{{name}}}({{#each parameters}}{{{name}}}: __request.{{{name}}}, {{/each}}{{#if requestBody.nativeType}}{{{requestBody.name}}}: {{{requestBody.name}}}, {{/if}}responseQueue: responseQueue, completion: completion)
}

{{/if}}
{{>frag/operationDocumentation}}
open func {{{name}}}({{{_params}}}{{#if _params}}, {{/if}}responseQueue: DispatchQueue? = nil, completion: @escaping ((_ result: {{className name}}Result) -> Void)) {
    let responseQueue = responseQueue ?? configuration.responseQueue
    Task {
        do {
            let result = try await {{{name}}}({{{_callParams}}})
            responseQueue.asyncIfPresent {
                completion(result)
            }
        } catch {
            responseQueue.asyncIfPresent {
                completion(.error(error))
            }
        }
    }
}

{{>frag/operationDocumentation}}
open func {{{name}}}({{{_params}}}) async throws -> {{className name}}Result {
    return try await {{{name}}}({{{_callParams}}}{{#if _params}}, {{/if}}allowsReauth: true)
}

private func {{{name}}}({{{_params}}}{{#if _params}}, {{/if}}allowsReauth: Bool) async throws -> {{className name}}Result {
    let __request = try await {{{name}}}Request({{{_callParams}}})
    let (response, data) = try await URLSession.handleApiRequest(__request)
    switch response.statusCode {
{{#each responses}}
    {{#ifneq code 401}}
    case {{{code}}}:
    {{#if defaultContent.nativeType}}
        do {
            let decodedData = try JSONDecoder().decode({{{defaultContent.nativeType.concreteType}}}.self, from: data)
            return ._{{{code}}}(decodedData)
        } catch {
            throw APIError.invalidResponse(error, response: response, data: data)
        }
        {{else}}
        return ._{{{code}}}
    {{/if}}
    {{/ifneq}}
{{/each}}
    case 401:
        if allowsReauth, let securityClient = configuration.securityClient {
            {{#if securityRequirements}}
            var didAuthenticate = false
            var lastError: Error?
            {{#each securityRequirements.requirements}}
            if !didAuthenticate {
                do {
                    {{#each schemes}}
                    try await securityClient.reauthenticate(securityScheme: .{{{scheme.name}}}, scopes: [{{#each scopes}}{{{stringLiteral name}}}{{#unless @last}}, {{/unless}}{{/each}}])
                    {{/each}}
                    didAuthenticate = true
                } catch (let error) {
                    lastError = error
                }
            }
            {{/each}}
            {{#unless securityRequirements.optional}}
            if !didAuthenticate {
                throw lastError!
            }
            {{/unless}}
            {{/if}}
            return try await {{{name}}}({{{_callParams}}}{{#if _callParams}}, {{/if}}allowsReauth: false)
        } else {
            throw APIError.authenticationFailed(response, data: data)
        }
    default:
        throw APIError.unexpectedResponse(response, data: data)
    }
}

{{>frag/operationDocumentation}}
open func {{{name}}}Request({{{_params}}}) async throws -> URLRequest {
    let localVarPath = "{{{group.path}}}{{{path}}}"
    {{#each pathParams}}
        .replacingOccurrences(of: "{{safe '{'}}{{{serializedName}}}{{safe '}'}}", with: String({{identifier name}}).addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!)
    {{/each}}

    var localVarHeaderParameter = [NameValuePair]()
    {{!-- Avoid Swift complaining that localVarHeaderParameter should be a let --}}
    localVarHeaderParameter.removeAll()

    var localVarUrlComponents = URLComponents(string: "\(self.basePath)\(localVarPath)")!
    var localVarQueryParameter = [NameValuePair]()
    if let localVarExistingQueryItems = localVarUrlComponents.queryItems {
        localVarQueryParameter.append(queryItems: localVarExistingQueryItems)
    }

{{#if queryParams}}
{{#each queryParams}}
    {{>frag/requestParameter dest='localVarQueryParameter' var=(identifier name) encoding=encoding}}
{{/each}}

{{/if}}
    

    localVarUrlComponents.queryItems = localVarQueryParameter.count > 0 ? localVarQueryParameter.toURLQueryItems() : nil

    var localVarRequest = URLRequest(url: localVarUrlComponents.url!, cachePolicy: self.cachePolicy, timeoutInterval: self.timeoutInterval)
    localVarRequest.httpMethod = {{{stringLiteral httpMethod}}}

{{#each headerParams}}
    {{>frag/requestParameter dest='localVarHeaderParameter' var=(identifier name) encoding=encoding}}

{{/each}}
{{#if cookieParams}}
    var localVarCookieParams = [NameValuePair]()
{{#each cookieParams}}
    {{>frag/requestParameter dest='localVarCookieParams' var=(identifier name) encoding=encoding}}

{{/each}}
    localVarHeaderParameter.set("Cookie", localVarCookieParams.toString(separator: "; "))

{{/if}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
    {{#if required}}
    {{>frag/requestBody}}
    {{else}}
    if let {{{name}}} = {{{name}}} {
        {{>frag/requestBody}}
    }
    {{/if}}
    
{{/with}}
{{/if}}

    {{>frag/requestSecurity}}

    localVarHeaderParameter.forEach { item in localVarRequest.addValue(item.value!, forHTTPHeaderField: item.name) }

    if let localVarPrepareRequestBlock = self.configuration.prepareRequestBlock {
        localVarPrepareRequestBlock(&localVarRequest)
    }
    return localVarRequest
}

