//  
//  {{>frag/generatedBy}}
//

import Foundation

/// A client for the OAuth 2.0 Client Credentials Flow
public class OAuthClientCredentialsFlowClient: AbstractOAuthFlowClient {
    
    private let tokenURL: URL
    
    public init(clientId: String,
                clientSecret: String,
                refreshURL: URL? = nil,
                preemptiveAccessTokenRefresh autoRefreshInterval: TimeInterval? = nil,
                tokenURL: URL,
                accessTokenDidChange: AccessTokenHandler? = nil) {
        self.tokenURL = tokenURL
        super.init(clientId: clientId, clientSecret: clientSecret, refreshURL: refreshURL, preemptiveAccessTokenRefresh: autoRefreshInterval, accessTokenDidChange: accessTokenDidChange)
    }
    
    public func authenticate(scopes: [String]?, additionalParams params: [String: String]? = nil) async throws {
        var form: [String: String] = [
            "grant_type": "client_credentials",
            "client_id": clientId,
            "client_secret": clientSecret
        ]
        if let scopes = scopes {
            form["scope"] = scopes.joined(separator: " ")
        }
        if let params = params {
            form.merge(params, uniquingKeysWith: { (_, new) in new })
        }
        let request = createOAuthRequest(url: tokenURL, params: form)
        
        let requestDate = Date()
        let result = try await URLSession.handleApiRequest(request)
        switch result.response.statusCode {
        case 200:
            var resultData = try JSONDecoder().decode(OAuthAccessToken.self, from: result.data)
            resultData.createdAt = requestDate
            try await tokenManager.setAccessToken(resultData)
        default:
            throw APIError.authenticationFailed(result.response, data: result.data)
        }
    }
    
    public override func reauthenticate(securityScheme: SecurityScheme, scopes: [String]?) async throws {
        do {
            try await super.reauthenticate(securityScheme: securityScheme, scopes: scopes)
        } catch {
            try await authenticate(scopes: scopes)
        }
    }
}
