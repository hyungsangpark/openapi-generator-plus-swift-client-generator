//  
//  {{>frag/generatedBy}}
//

import Foundation

extension Foundation.URLSession {

    static var apiSession = Foundation.URLSession(configuration: .default)

    @available(*, renamed: "handleApiRequest(_:)")
    static func handleApiRequest(_ request: Foundation.URLRequest, completion: @escaping ((_ response: Foundation.HTTPURLResponse?, _ data: Data?, _ error: Error?) -> Void)) {
        Task {
            do {
                let result = try await handleApiRequest(request)
                completion(result.response, result.data, nil)
            } catch {
                completion(nil, nil, error)
            }
        }
    }
    
    static func handleApiRequest(_ request: Foundation.URLRequest) async throws -> (response: HTTPURLResponse, data: Data) {
        do {
            let (data, response) = try await apiSession.data(for: request)
            guard let httpResponse = response as? HTTPURLResponse else {
                throw APIError.unexpectedResponse(response, data: data)
            }
            return (response: httpResponse, data: data)
        } catch {
            throw APIError.systemError(error)
        }
    }
}
