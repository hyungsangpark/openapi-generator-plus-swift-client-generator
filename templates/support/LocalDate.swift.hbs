//  
//  {{>frag/generatedBy}}
//

import Foundation

public struct LocalDate: Codable, Hashable, LosslessStringConvertible {
    
    private static let regex = try! NSRegularExpression(pattern: "^(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})$", options: [])

    enum DecoderError: Error {
        case invalidMatch(value: String)
    }
    
    public var year: Int
    public var month: Int
    public var day: Int
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let dateString = try container.decode(String.self)
        if let initialized = Self(dateString) {
            self = initialized
        } else {
            throw DecoderError.invalidMatch(value: dateString)
        }
    }

    public init?(_ description: String) {
        guard let matches = LocalDate.regex.matches(in: description, options: [], range: NSRange(description.startIndex..<description.endIndex, in: description)).first else {
            return nil
        }
        do {
            self.year = try matches.namedInt("year", in: description)
            self.month = try matches.namedInt("month", in: description)
            self.day = try matches.namedInt("day", in: description)
        } catch {
            return nil
        }
    }
    
    var dateComponents: DateComponents {
        return DateComponents(year: year, month: month, day: day)
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(self.description)
    }

    public var description: String {
        var timeStringComponents = [String]()
        
        timeStringComponents.append(String(format: "%04d", year))
        timeStringComponents.append(String(format: "%02d", month))
        timeStringComponents.append(String(format: "%02d", day))
        
        return timeStringComponents.joined(separator: "-")
    }
}
