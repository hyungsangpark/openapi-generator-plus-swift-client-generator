import Foundation

struct LocalDate: Codable {
    
    private static let regex = try! NSRegularExpression(pattern: "^(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})$", options: [])

    enum DecoderError: Error {
        case invalidMatch(value: String)
    }
    
    var year: Int
    var month: Int
    var day: Int
    
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let dateString = try container.decode(String.self)
        guard let matches = LocalDate.regex.matches(in: dateString, options: [], range: NSRange(dateString.startIndex..<dateString.endIndex, in: dateString)).first else {
            throw DecoderError.invalidMatch(value: dateString)
        }
        year = try matches.namedInt("year", in: dateString)
        month = try matches.namedInt("month", in: dateString)
        day = try matches.namedInt("day", in: dateString)
    }
    
    
    
    var dateComponents: DateComponents {
        return DateComponents(year: year, month: month, day: day)
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        var timeStringComponents = [String]()
        
        timeStringComponents.append(String(format: "%04d", year))
        timeStringComponents.append(String(format: "%02d", month))
        timeStringComponents.append(String(format: "%02d", day))
        
        let timeString = timeStringComponents.joined(separator: "-")
        
        try container.encode(timeString)
    }
}
