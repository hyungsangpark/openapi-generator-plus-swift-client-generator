//  
//  {{>frag/generatedBy}}
//

import Foundation

public struct OffsetDateTime: Codable, Hashable, LosslessStringConvertible {
    private static let regex = try! NSRegularExpression(pattern: "^(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})T(?:(?<hour>\\d*):)?(?:(?<minute>\\d*):)(?<second>\\d*\\.?\\d*)(?:(?<timezone>Z)|(?<timezoneOffset>[+-]\\d{2}:\\d{2}))?$", options: [])
    
    enum DecoderError: Error {
        case invalidMatch(value: String)
    }
    
    public var year: Int
    public var month: Int
    public var day: Int
    public var hour: Int
    public var minute: Int
    public var seconds: Double
    public var timezone: TimeZone?
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let dateString = try container.decode(String.self)
        if let initialized = Self(dateString) {
            self = initialized
        } else {
            throw DecoderError.invalidMatch(value: dateString)
        }
    }

    public init?(_ description: String) {
        guard let matches = OffsetDateTime.regex.matches(in: description, options: [], range: NSRange(description.startIndex..<description.endIndex, in: description)).first else {
            return nil
        }
        
        do {
            year = try matches.namedInt("year", in: description)
            month = try matches.namedInt("month", in: description)
            day = try matches.namedInt("day", in: description)
            hour = try matches.namedInt("hour", in: description)
            minute = try matches.namedInt("minute", in: description)
            seconds = try matches.namedDouble("second", in: description)
            
            if var timezoneString = try? matches.namedString("timezoneOffset", in: description) {
                let ordinal = timezoneString.removeFirst()
                let components = timezoneString.components(separatedBy: ":")
                let time = (Int(components[0])!*60 + Int(components[1])!) * 60
                if ordinal == "-" {
                    timezone = TimeZone(secondsFromGMT: time * -1)!
                } else {
                    timezone = TimeZone(secondsFromGMT: time)!
                }
            } else {
                timezone = nil
            }
        } catch {
            return nil
        }
    }
    
    var second: Int {
        Int(seconds)
    }
    
    var nanoSecond: Int {
        Int(seconds.truncatingRemainder(dividingBy: 1) * Double(NSEC_PER_SEC))
    }
    
    var dateComponents: DateComponents {
        return DateComponents(timeZone: timezone, hour: hour, minute: minute, second: second, nanosecond: nanoSecond)
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(self.description)
    }

    public var description: String {
        var dateStringComponents = [String]()
        
        dateStringComponents.append(String(format: "%04d", year))
        dateStringComponents.append(String(format: "%02d", month))
        dateStringComponents.append(String(format: "%02d", day))
        
        let dateString = dateStringComponents.joined(separator: "-")
        
        var timeStringComponents = [String]()
        
        timeStringComponents.append(String(format: "%02d", hour))
        timeStringComponents.append(String(format: "%02d", minute))
        timeStringComponents.append(String(format: "%02.3f", seconds))
        
        var timeString = timeStringComponents.joined(separator: ":")
        
        if let timezone = timezone {
            timeString += timezone.apiTimeZoneString
        } else {
            timeString += "Z"
        }
        
        return "\(dateString)T\(timeString)"
    }
}
