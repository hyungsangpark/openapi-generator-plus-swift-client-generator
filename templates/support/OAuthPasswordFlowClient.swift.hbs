//  
//  {{>frag/generatedBy}}
//

import Foundation

/// A client for the OAuth 2.0 Password Flow
public class OAuthPasswordFlowClient: AbstractOAuthFlowClient {
    
    public private(set) var tokenURL: URL
    
    public init(clientId: String,
                clientSecret: String,
                refreshURL: URL? = nil,
                preemptiveAccessTokenRefresh autoRefreshInterval: TimeInterval? = nil,
                tokenURL: URL) {
        self.tokenURL = tokenURL
        super.init(clientId: clientId, clientSecret: clientSecret, refreshURL: refreshURL, preemptiveAccessTokenRefresh: autoRefreshInterval)
    }
    
    public func authenticate(username: String, password: String, scopes: [String]?, additionalParams params: [String: String]? = nil) async throws {
        var form: [String: String] = [
            "grant_type": "password",
            "username": username,
            "password": password,
            "client_id": clientId,
            "client_secret": clientSecret
        ]
        if let scope = scopes {
            form["scope"] = scopes?.joined(separator: " ")
        }
        if let params = params {
            form.merge(params, uniquingKeysWith: { (_, new) in new })
        }
        let request = createOAuthRequest(url: tokenURL, params: form)
        
        let requestDate = Date()
        let result = try await URLSession.handleApiRequest(request)
        switch result.response.statusCode {
        case 200:
            var resultData = try JSONDecoder().decode(OAuthAccessToken.self, from: result.data)
            resultData.createdAt = requestDate
            await try tokenManager.setAccessToken(resultData)
        default:
            throw APIError.authenticationFailed(result.response, data: result.data)
        }
    }
}
