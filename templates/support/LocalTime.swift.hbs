//  
//  {{>frag/generatedBy}}
//

import Foundation

public struct LocalTime: Swift.Codable, Swift.Hashable, Swift.LosslessStringConvertible {
    
    private static let regex = try! Foundation.NSRegularExpression(pattern: "^(?:(\\d*):)?(?:(\\d*):)(\\d*\\.?\\d*)$", options: [])
    
    enum DecoderError: Error {
        case invalidMatch(value: String)
    }
    
    public var hour: Int?
    public var minute: Int
    public var seconds: Double
        
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let dateString = try container.decode(String.self)
        if let initialized = Self(dateString) {
            self = initialized
        } else {
            throw DecoderError.invalidMatch(value: dateString)
        }
    }

    public init?(_ description: String) {
        guard let matches = LocalTime.regex.matches(in: description, options: [], range: Foundation.NSRange(description.startIndex..<description.endIndex, in: description)).first else {
            return nil
        }
        do {
            hour = try? matches.intAt(1, in: description)
            minute = try matches.intAt(2, in: description)
            seconds = try matches.doubleAt(3, in: description)
        } catch {
            return nil
        }
    }
    
    var second: Int {
        Int(seconds)
    }
    
    var nanoSecond: Int {
        Int(seconds.truncatingRemainder(dividingBy: 1) * Double(NSEC_PER_SEC))
    }
    
    var dateComponents: DateComponents {
        return DateComponents(hour: hour, minute: minute, second: second, nanosecond: nanoSecond)
    }
        
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(self.description)
    }

    public var description: String {
        var timeStringComponents = [String]()
        
        if let hour = hour {
            timeStringComponents.append(String(format: "%02d", hour))
        }
        timeStringComponents.append(String(format: "%02d", minute))
        timeStringComponents.append(String(format: "%02.3f", seconds))
        
        return timeStringComponents.joined(separator: ":")
    }
}