//  
//  {{>frag/generatedBy}}
//

import Foundation

public class AbstractOAuthFlowClient: SecurityClient {
    
    private let tokenManager: OAuthAccessTokenManager
    
    let clientId: String
    let clientSecret: String
    
    public var refreshToken: String? {
         get async {
            return await tokenManager.accessToken?.refreshToken
        }
    }

    public var accessToken: OAuthAccessToken? {
         get async {
            return await tokenManager.accessToken
        }
    }

    init(clientId: String, clientSecret: String, refreshURL: URL?, preemptiveAccessTokenRefresh autoRefreshInterval: TimeInterval? = nil) {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.tokenManager = OAuthAccessTokenManager(refreshTokenURL: refreshURL, preemptiveAccessTokenRefresh: autoRefreshInterval)
    }
    
    func setAccessToken(_ token: OAuthAccessToken) async throws {
        try await tokenManager.setAccessToken(token)
    }
    
    func setRefreshToken(_ token: String) async throws {
        try await tokenManager.setRefreshToken(token)
        try await tokenManager.refreshToken()
    }
    
    public func authenticate(refreshToken: String) async throws {
        try await setRefreshToken(refreshToken)
    }
    
    public func reauthenticate(securityScheme: SecurityScheme, scopes: [String]?) async throws {
        try await tokenManager.refreshToken()
    }
    
    public func authorize(request: URLRequest, securityScheme: SecurityScheme, scopes: [String]?) async throws -> URLRequest {
        return try await tokenManager.authorize(request: request)
    }
}

/**
 Creates a URLRequest for OAuth authentication.

 - Parameters:
    - url: The URL for the request.
    - params: A dictionary of key-value pairs for the request parameters.

 - Returns: A URLRequest configured for OAuth authentication.
 */
func createOAuthRequest(url: URL, params: [String: String]) -> URLRequest {
    var refreshRequest = URLRequest(url: url)
    refreshRequest.httpMethod = "POST"
    refreshRequest.addValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
    refreshRequest.addValue("application/json", forHTTPHeaderField: "Accept")
    
    let queryString = params.map({ key, value in
        let k = key.addingPercentEncoding(withAllowedCharacters: .formUrlEncoded)!
        let v = value.addingPercentEncoding(withAllowedCharacters: .formUrlEncoded)!
        return "\(k)=\(v)"
    }).joined(separator: "&")
    
    let formData = queryString.data(using: .utf8)
    
    refreshRequest.httpBody = formData
    
    return refreshRequest
}