//  
//  {{>frag/generatedBy}}
//

import Foundation

public protocol SecurityClient {
    /** An API request received a 401 response */
    func reauthenticate(securityScheme: SecurityScheme, scopes: [String]?) async throws
    
    /** An authorization header to the request */
    func authorize(securityScheme: SecurityScheme, scopes: [String]?, request: URLRequest) async throws -> URLRequest
}

/** Delegates security requirements to the appropriate SecurityClient. */
public class SecurityClientController: SecurityClient {

    var clients: [SecurityScheme: SecurityClient] = [:]

    public init(clients: [SecurityScheme : SecurityClient] = [:]) {
        self.clients = clients
    }

    public func setClient(securityScheme: SecurityScheme, client: SecurityClient) {
        self.clients[securityScheme] = client
    }

    public func reauthenticate(securityScheme: SecurityScheme, scopes: [String]?) async throws {
        if let client = clients[securityScheme] {
            try await client.reauthenticate(securityScheme: securityScheme, scopes: scopes)
        } else {
            throw APIError.securitySchemeNotConfigured(securityScheme)
        }
    }

    public func authorize(securityScheme: SecurityScheme, scopes: [String]?, request: URLRequest) async throws -> URLRequest {
        if let client = clients[securityScheme] {
            return try await client.authorize(securityScheme: securityScheme, scopes: scopes, request: request)
        } else {
            throw APIError.securitySchemeNotConfigured(securityScheme)
        }
    }
}

func createOAuthRequest(url: URL, params: [String: String]) -> URLRequest {
    var refreshRequest = URLRequest(url: url)
    refreshRequest.httpMethod = "POST"
    refreshRequest.addValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
    refreshRequest.addValue("application/json", forHTTPHeaderField: "Accept")
    
    let queryString = params.map({ key, value in
        let k = key.addingPercentEncoding(withAllowedCharacters: .formUrlEncoded)!
        let v = value.addingPercentEncoding(withAllowedCharacters: .formUrlEncoded)!
        return "\(k)=\(v)"
    }).joined(separator: "&")
    
    let formData = queryString.data(using: .utf8)
    
    refreshRequest.httpBody = formData
    
    return refreshRequest
}

public class AbstractOAuthFlowClient: SecurityClient {
    
    private let tokenManager: OAuthAccessTokenManager
    
    let clientId: String
    let clientSecret: String
    
    public var refreshToken: String? {
         get async {
            return await tokenManager.accessToken?.refreshToken
        }
    }

    public var accessToken: OAuthAccessToken? {
         get async {
            return await tokenManager.accessToken
        }
    }

    init(clientId: String, clientSecret: String, refreshURL: URL?, preemptiveAccessTokenRefresh autoRefreshInterval: TimeInterval? = nil) {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.tokenManager = OAuthAccessTokenManager(refreshTokenURL: refreshURL, preemptiveAccessTokenRefresh: autoRefreshInterval)
    }
    
    func setAccessToken(_ token: OAuthAccessToken) async throws {
        try await tokenManager.setAccessToken(token)
    }
    
    func setRefreshToken(_ token: String) async throws {
        try await tokenManager.setRefreshToken(token)
        try await tokenManager.refreshToken()
    }
    
    public func authenticate(refreshToken: String) async throws {
        try await setRefreshToken(refreshToken)
    }
    
    public func reauthenticate(securityScheme: SecurityScheme, scopes: [String]?) async throws {
        try await tokenManager.refreshToken()
    }
    
    public func authorize(securityScheme: SecurityScheme, scopes: [String]?, request: URLRequest) async throws -> URLRequest {
        return try await tokenManager.authorize(request: request)
    }
}

public class OAuthPasswordFlowClient: AbstractOAuthFlowClient {
    
    public private(set) var tokenURL: URL?
    
    public init(clientId: String,
                clientSecret: String,
                refreshURL: URL? = nil,
                preemptiveAccessTokenRefresh autoRefreshInterval: TimeInterval? = nil,
                tokenURL: URL? = nil) {
        super.init(clientId: clientId, clientSecret: clientSecret, refreshURL: refreshURL, preemptiveAccessTokenRefresh: autoRefreshInterval)
        self.tokenURL = tokenURL
    }
    
    public func authenticate(username: String, password: String, scopes: [String]?, additionalParams params: [String: String]? = nil) async throws {
        guard let url: URL = tokenURL else {
            throw APIError.authenticationPrevented
        }
        var form: [String: String] = [
            "grant_type": "password",
            "username": username,
            "password": password,
            "client_id": clientId,
            "client_secret": clientSecret
        ]
        if let scope = scopes {
            form["scope"] = scopes?.joined(separator: " ")
        }
        if let params = params {
            form.merge(params, uniquingKeysWith: { (_, new) in new })
        }
        let request = createOAuthRequest(url: url, params: form)
        
        let requestDate = Date()
        let result = try await URLSession.handleApiRequest(request)
        switch result.response.statusCode {
        case 200:
            var resultData = try JSONDecoder().decode(OAuthAccessToken.self, from: result.data)
            resultData.createdAt = requestDate
            await try setAccessToken(resultData)
        default:
            throw APIError.authenticationFailed(result.response, data: result.data)
        }
    }
}

public class OAuthClientCredentialsFlowClient: AbstractOAuthFlowClient {
    
    private let tokenURL: URL?
    
    public init(clientId: String,
                clientSecret: String,
                refreshURL: URL? = nil,
                preemptiveAccessTokenRefresh autoRefreshInterval: TimeInterval? = nil,
                tokenURL: URL? = nil) {
        self.tokenURL = tokenURL
        super.init(clientId: clientId, clientSecret: clientSecret, refreshURL: refreshURL, preemptiveAccessTokenRefresh: autoRefreshInterval)
    }
    
    public func authenticate(scopes: [String]?, additionalParams params: [String: String]? = nil) async throws {
        guard let url: URL = tokenURL else {
            throw APIError.authenticationPrevented
        }
        var form: [String: String] = [
            "grant_type": "client_credentials",
            "client_id": clientId,
            "client_secret": clientSecret
        ]
        if let scope = scopes {
            form["scope"] = scopes?.joined(separator: " ")
        }
        if let params = params {
            form.merge(params, uniquingKeysWith: { (_, new) in new })
        }
        let request = createOAuthRequest(url: url, params: form)
        
        let requestDate = Date()
        let result = try await URLSession.handleApiRequest(request)
        switch result.response.statusCode {
        case 200:
            var resultData = try JSONDecoder().decode(OAuthAccessToken.self, from: result.data)
            resultData.createdAt = requestDate
            await try setAccessToken(resultData)
        default:
            throw APIError.authenticationFailed(result.response, data: result.data)
        }
    }
    
    public override func reauthenticate(securityScheme: SecurityScheme, scopes: [String]?) async throws {
        do {
            try await super.reauthenticate(securityScheme: securityScheme, scopes: scopes)
        } catch {
            try await authenticate(scopes: scopes)
        }
    }
    
}

public class OAuthAuthorizationCodeFlowClient: AbstractOAuthFlowClient {
    
    private let tokenURL: URL?
    private let authorizationURL: URL?
    
    public init(clientId: String,
                clientSecret: String,
                refreshURL: URL? = nil,
                preemptiveAccessTokenRefresh autoRefreshInterval: TimeInterval? = nil,
                tokenURL: URL? = nil,
                authorizationURL: URL? = nil) {
        self.tokenURL = tokenURL
        self.authorizationURL = authorizationURL
        
        super.init(clientId: clientId, clientSecret: clientSecret, refreshURL: refreshURL, preemptiveAccessTokenRefresh: autoRefreshInterval)
    }
    
}

/// A `SecurityClient` responsible for handling basic authentication credentials.
public class BasicAuthenticationSecurityClient: SecurityClient {
    
    private let username: String
    private let password: String
    
    /// Initializes a `BasicAuthenticationSecurityClient` instance with provided credentials.
    ///
    /// - Parameters:
    ///   - username: A string representing the username for authentication.
    ///   - password: A string representing the password for authentication.
    public init(username: String, password: String) {
        self.username = username
        self.password = password
    }
    
    public func reauthenticate(securityScheme: SecurityScheme, scopes: [String]?) async throws {
        
    }
    
    public func authorize(securityScheme: SecurityScheme, scopes: [String]?, request: URLRequest) async throws -> URLRequest {
        var request = request
        let token = "\(username):\(password)".data(using: .utf8)!.base64EncodedString()
        request.setValue("Basic \(token)", forHTTPHeaderField: "Authorization")
        return request
    }

}

/// A `SecurityClient` responsible for handling api key authentication credentials.
public class APIKeySecurityClient: SecurityClient {
    
    private let apiKey: String
    private let paramName: String
    
    public enum Mode {
        case header
        case query
        case cookie
    }
    
    private let mode: Mode
    
    /// Initializes a `APIKeySecurityClient` instance with provided credentials.
    ///
    /// - Parameters:
    ///   - apiKey: A string representing the username for authentication.
    ///   - mode: A setting to configure the location of the API Key in the request.
    ///   - paramName: The name of the parameter which will appear as the header or query name
    public init(apiKey: String, mode: Mode, paramName: String) {
        self.apiKey = apiKey
        self.mode = mode
        self.paramName = paramName
    }
    
    public func reauthenticate(securityScheme: SecurityScheme, scopes: [String]?) async throws {
        
    }
    
    public func authorize(securityScheme: SecurityScheme, scopes: [String]?, request: URLRequest) async throws -> URLRequest {
        var request = request
        switch mode {
        case .header:
            request.setValue(apiKey, forHTTPHeaderField: paramName)
        case .query:
            guard let url = request.url else {
                throw APIError.authenticationPrevented
            }
            var components = URLComponents(string: url.absoluteString)
            var queryItems = components?.queryItems ?? []
            queryItems.append(URLQueryItem(name: paramName, value: apiKey))
            components?.queryItems = queryItems
            request.url = components?.url
        case .cookie:
            let cookieProperties: [HTTPCookiePropertyKey: Any] = [
                HTTPCookiePropertyKey.name: paramName,
                HTTPCookiePropertyKey.value: apiKey,
            ]

            if let cookie = HTTPCookie(properties: cookieProperties) {
                let headers = HTTPCookie.requestHeaderFields(with: [cookie])
                headers.forEach { key, value in
                    request.setValue(value, forHTTPHeaderField: key)
                }
            }
        }
        return request
    }
}
